#!/usr/bin/env python3
import os
import sys
import json
import hashlib
import subprocess
from collections import OrderedDict

def bhash(fs, hasher, bsize = 65536):
    buf = fs.read(bsize)
    while len(buf) > 0:
        hasher.update(buf)
        buf = fs.read(bsize)
        yield hasher

if '__main__' == __name__:
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("episodes_file", help="Path to the episodes json file.")
    parser.add_argument("--source_dir", default=".", help="""
	Path to the folder where the temporary download files are located.""")
    parser.add_argument("--destination_dir", default=".", help="""
	Path to a folder for saving the gernerated mkv files.
	""")
    args = parser.parse_args()

    episodes_json = ''
    with open(episodes_file,'r') as fs:
        episodes_json = fs.read()
    episodes = json.loads(episodes_json)

    for title, episode in episodes.items():
        mkv_file_name = title+'.mkv'
        destination_path = os.path.join(args.destination_dir, mkv_file_name)
        if os.path.isfile(destination_path):
            sys.stderr.write(
                    "File {} already exists! Skip.\n"\
                            .format(destination_path))
            continue
        rm_args = []
        mkvmerge_args = []
        skip_episode = False
        vtrack_counter = 0
        mkvmerge_args += ["-o", "{}".format(destination_path)]
        for ref, track in OrderedDict(sorted(episode['tracks'].items(),
                                                key=lambda t: t[0])).items():
            hasher = hashlib.md5()
            ending = os.path.basename(track['source_path']).split('.')[1]
            source_file_name = track['id']+'.'+ending
            source_path = os.path.join(args.source_dir, source_file_name)
            md5hash = None
            if not os.path.isfile(source_path):
                skip_episode = True
                break
            with open(source_path,'br') as fs:
                for hasher in bhash(fs, hasher):
                    md5hash = hasher.hexdigest()
            if md5hash != track['md5_checksum']:
                skip_episode = True
                break
            mkvmerge_args += ["--default-duration", "{}:{}fps".format(vtrack_counter,track['video_framerate'])]
            mkvmerge_args.append(source_path)
            rm_args.append(source_path)
            vtrack_counter += 2
        if skip_episode:
            sys.stderr.write(
                    "Track {} of episode {} is not complete or corrupted.\n"\
                            .format(source_path, title))
            continue

        command = ["mkvmerge"]+mkvmerge_args
        if 0 == subprocess.call(["mkvmerge"]+mkvmerge_args):
            mkv_relpath = os.path.relpath(destination_path,
                    os.path.dirname(args.episodes_file))
            episodes[title]['mkv'] = mkv_relpath
            subprocess.call(["rm"]+rm_args)

    with open(args.episodes_file,'w') as fs:
        fs.write(json.dumps(episodes, sort_keys=True, indent=4,
                                                        separators=(',', ': ')))
